{
  
    
        "post0": {
            "title": "Streaming OBS Recordings to YouTube",
            "content": "Setting Up . Currently OBS Studio can only stream to a single service, such as Facebook or YouTube, but we are going to set up a way to stream to another service at the same time. Assuming that you are already comfortable streaming to Facebook, YouTube will be our second service. . You&#39;ll need to install FFmpeg and Python 3. . The following Python code can be run from a Jupyter notebook, or saved as something like second_stream.py and run from there. . Replace xxxx-xxxx-xxxx-xxxx with your stream key from YouTube Studio, and /home/username/Videos with the path to the folder where OBS records your videos. You may also need to include the ffmpeg_path. . This code finds the most recent file in your OBS recordings folder and streams that file to YouTube. You may want to enable the setting &quot;Automatically record when streaming&quot; in OBS, otherwise you&#39;ll need to click &quot;Start Streaming&quot; and &quot;Start Recording&quot; each time. . Start recording in OBS then run the code, and it should start streaming the recording to YouTube without interfering with your primary stream. You will, of course, need enough upload bandwidth for both streams. . Potentially you could have another copy of this Python script running to streams the recording to a third service, such as Twitch. . #! /usr/bin/env python3 stream_key = &#39;xxxx-xxxx-xxxx-xxxx&#39; recording_path = &#39;/home/username/Videos&#39; ffmpeg_path = &#39;&#39; print(&quot;If you haven&#39;t started the recording already, press Ctrl-c to cancel this...&quot;) from datetime import datetime from pathlib import Path import os # find the newest file in the folder p = Path(recording_path) time, newest_file = max((f.stat().st_mtime, f) for f in p.iterdir()) youtube_server = &#39;rtmp://a.rtmp.youtube.com/live2/&#39; command = ffmpeg_path+&#39;ffmpeg -re -i &#39;+str(newest_file)+&#39; -acodec copy -vcodec copy -f flv &#39;+youtube_server+stream_key os.system(command) . Hopefully that helps get you started with secondary streams from OBS Studio. Let me know if any of this doesn&#39;t work for you. .",
            "url": "https://misterhay.github.io/fastpages/jupyter/2020/06/09/stream-obs-recording-to-youtube.html",
            "relUrl": "/jupyter/2020/06/09/stream-obs-recording-to-youtube.html",
            "date": " • Jun 9, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Pandas Cheatsheet",
            "content": "Pandas Cheatsheet . import pandas as pd . Creating a DataFrame . from online data . df = pd.read_csv(csv_url) # if necessary: skiprows=2 or encoding=&#39;windows-1251&#39; df = pd.read_excel(excel_url, &#39;Sheet Name&#39;) df = pd.read_json(json_url_or_string) df = pd.read_html(page_url) . from input or loop data . df = pd.DataFrame(columns=[&#39;Column 1&#39;, &#39;Column 2&#39;]) for thing in list_of_things: df = df.append({&#39;Column 1&#39;:thing, &#39;Column 2&#39;:&#39;other thing&#39;}, ignore_index=True) df[&#39;New Column&#39;] = df[&#39;Column 1&#39;]*df[&#39;Column 2&#39;] # create a new column from existing one(s) . Displaying Data . df.head(n) # n is number of rows, default is 5 df.tail(n) df.shape df.columns . Sorting Data . df.sort_values(&#39;Column 1&#39;, ascending=False) # default is ascending=True, axis=1 to sort columns df.sort_index() . Selecting Data . df[&#39;Column 1&#39;] df[1:] df.loc[[0],[&#39;Column 1&#39;]] df.iloc[[0, 7]] # select rows with given index values df[df[&#39;Column 1&#39;]==&#39;some value&#39;] df[df[&#39;Column 1&#39;].isin([&#39;some value&#39;, &#39;other value&#39;])] df[df[&#39;Column 1&#39;].between(5, 10)] df[(df[&#39;Column 1&#39;]==&#39;some value&#39;) &amp; (df[&#39;Column 2&#39;]&gt;3)] # use | for &quot;or&quot; . Summarizing Data . df.describe() df.sum() df[&#39;Column 1&#39;].sum() df.min() df.max() df.mean() df.median() df[&#39;Column 1&#39;].unique() df.count() # axis=1 for count by columns, numeric_only=True for just numbers df.corr() # correlation coefficients df.std() # standard deviation df.groupby(&#39;Column 2&#39;) df.agg([&#39;min&#39;, &#39;max&#39;]) . Cleaning Data . df2 = df.dropna() # drop any &quot;not available&quot; data df.dropna(axis=0, inplace=True) # drop rows, can also how=&#39;any&#39; or how=&#39;all&#39; df2 = df.dropna(axis=1) # drop columns, create a new dataframe df2 = df.fillna(value=0) df[&#39;Column 1&#39;].fillna(value=0, inplace=True) df.drop(df.index[[2, 7]], inplace=True) df.drop(columns=[&#39;Column 1&#39;, &#39;Column 3&#39;], inplace=True) . Transforming Data . df.T # transpose rows and columns df.set_index(&#39;Column 1&#39;) df.rename(columns={&#39;Column 1&#39;:&#39;New Column Name&#39;}, inplace=True) df.columns = [&#39;New Column Name&#39;, &#39;Other New Column Name&#39;] df.replace(&#39;previous value&#39;,&#39;new value&#39;,regex=True,inplace=True) . Merging Data . df.append(df2) # add rows, make sure column names are the same new_df = pd.merge(df, df2, on=&#39;Column 1&#39;) # default on=index new_df = df.join(other_df) new_df = pd.concat([df, df2], axis=1) # add columns, make sure row names or indexes are the same . Graphing Data with Cufflinks . import cufflinks as cf # joins pandas and Plotly, similar to pandas&#39;s .plot cf.go_offline() df.iplot(kind=&#39;bar&#39;, x=&#39;Column 1&#39;, y=&#39;Column 2&#39;) df.iplot(y=&#39;Column 1&#39;, title=&#39;Graph&#39;, xTitle=&#39;index&#39;, yTitle=&#39;y values&#39;) # default x is index # options for kind= are &#39;bar&#39;, &#39;scatter&#39;, &#39;box&#39;, &#39;histogram&#39;, &#39;spread&#39;, &#39;heatmap&#39;, &#39;bubble&#39;, &#39;pie&#39; # 3D kind= are &#39;scatter3d&#39;, &#39;bubble3d&#39;, &#39;surface&#39; .",
            "url": "https://misterhay.github.io/fastpages/markdown/2020/06/09/pandas-cheatsheet.html",
            "relUrl": "/markdown/2020/06/09/pandas-cheatsheet.html",
            "date": " • Jun 9, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Data Science Example - Olympics",
            "content": "import pandas as pd import cufflinks as cf cf.go_offline() #olympics = pd.read_csv(&#39;./olympics.csv&#39;) olympics = pd.read_csv(&#39;https://raw.githubusercontent.com/callysto/online-courses/master/CallystoAndDataScience/olympics.csv&#39;) . athletes_by_year = olympics.groupby([&quot;Year&quot;]).size().iplot(title=&#39;Number of Athletes per Year (Olympics)&#39;,yTitle=&#39;Number of Athletes&#39;,xTitle=&#39;Year&#39;) . olympics[olympics[&#39;Season&#39;]==&#39;Winter&#39;].groupby([&quot;Year&quot;]).size().iplot(title=&#39;Number of Athletes per Year (Winter Olympics)&#39;,yTitle=&#39;Number of Athletes&#39;,xTitle=&#39;Year&#39;) . medals = olympics.dropna(subset=[&quot;Medal&quot;]) medals_winter = medals[medals[&quot;Season&quot;]==&quot;Winter&quot;] medals_winter.groupby(&#39;region&#39;).count().sort_values(&#39;Medal&#39;,ascending=False)[&#39;Medal&#39;].head(20).iplot(kind=&#39;bar&#39;,title=&#39;Medals per Country (Winter Olympics, Top 20 Countries)&#39;,yTitle=&#39;Number of Medals&#39;) . canada_medals = medals[medals[&#39;region&#39;]==&#39;Canada&#39;] canada_medals.groupby(&#39;Sport&#39;).count().sort_values(&#39;Medal&#39;,ascending=False)[&#39;Medal&#39;].iplot(kind=&#39;bar&#39;,title=&#39;Canadian Olympic Medals per Sport&#39;) . df_canada_medals = pd.DataFrame(canada_medals.groupby(&#39;Sport&#39;).count().sort_values(&#39;Medal&#39;,ascending=False)[&#39;Medal&#39;]) df_canada_medals.rename(columns={&#39;Medal&#39;:&#39;Medals&#39;}, inplace=True) df_canada_medals . Medals . Sport . Ice Hockey 348 | . Rowing 203 | . Athletics 98 | . Swimming 98 | . Short Track Speed Skating 70 | . Football 49 | . Curling 48 | . Speed Skating 45 | . Figure Skating 43 | . Lacrosse 36 | . Canoeing 33 | . Synchronized Swimming 26 | . Sailing 25 | . Shooting 24 | . Cycling 23 | . Bobsleigh 18 | . Diving 18 | . Freestyle Skiing 18 | . Wrestling 17 | . Equestrianism 17 | . Boxing 17 | . Rugby Sevens 12 | . Alpine Skiing 11 | . Basketball 9 | . Trampolining 7 | . Snowboarding 7 | . Judo 5 | . Cross Country Skiing 4 | . Skeleton 4 | . Biathlon 3 | . Weightlifting 3 | . Beach Volleyball 2 | . Taekwondo 2 | . Tennis 2 | . Triathlon 2 | . Art Competitions 2 | . Golf 1 | . Rhythmic Gymnastics 1 | . Gymnastics 1 | . medals_per_athlete = pd.DataFrame(medals.groupby(&#39;Name&#39;).count().sort_values(&#39;Medal&#39;,ascending=False).head(20)[&#39;Medal&#39;]) medals_per_athlete.merge(olympics[[&#39;Name&#39;,&#39;region&#39;]].drop_duplicates(&#39;Name&#39;),on=&#39;Name&#39;).iplot(kind=&#39;barh&#39;,title=&#39;Number of Olympic Medals per Athlete (Top 20)&#39;,y=&#39;Medal&#39;,x=&#39;Name&#39;,xTitle=&#39;Number of Medals&#39;,text=&#39;region&#39;) .",
            "url": "https://misterhay.github.io/fastpages/2020/04/29/module-one-unit-one.html",
            "relUrl": "/2020/04/29/module-one-unit-one.html",
            "date": " • Apr 29, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://misterhay.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://misterhay.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About MisterHay",
          "content": "David Hay . Husband, Father, Educator, Facilitator, Maker, Nerd . Twitter . Blog . LinkedIn . YouTube . Facebook . Instagram . Presentations . Podcasts . Instructables . Thingiverse . Pinterest .",
          "url": "https://misterhay.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://misterhay.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}